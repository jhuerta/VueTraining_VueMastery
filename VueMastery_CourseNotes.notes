`----------------------------------------------------`
1. List One 
2. List Two 
`----------------------------------------------------`
--> ----> 
==> ===> ====>
`----------------------------------------------------`
[javascript]
function() {
    console.log("Hellow World!");
}
[end]

function(){
        console.log("Hellow World!");
}

`----------------------------------------------------`
`Take Note` #Highlight# "Emphasis" * Important * !Remember! 
//Comment
[Square] (Other) {Brackets}
`----------------------------------------------------`
http://www.google.com
`----------------------------------------------------`

#SECTION 1.1: FIRST BASIC APPLICATION#
v-show: Toggles visibility 
v-if: Add and remove the element from the dom
Computed properties are CACHED, way more efficient than a method, run every time something changes.

#SECTION 3: OPTIMIZING YOUR EDITOR (VS CODE)

1) Install Vetur
    1) Color Highlight
    2) Snippets (in Vue files)
        2.1) scaffold
        2.2) emmet
2) Install Prettier - Code Formatter (Esben Petersen) 
3) Install ESLint (Dirk Baeumer)
4) Configure ESLint + Prettier  
    4.1) Previously, in our project, we have chosen dedicated config files. 
    4.2) Because dedicated config files, we have a .eslintrc files. (if not, the eslint configuration will be in the package.json file)
    4.3) Open .eslintrc and edit:
        4.3.1) 'extends': [ ...,'plugin:prettier/recommended',...] ===> This enable prettier within eslint support with default settings
    4.4) Create prettier config file for our own custom settings:
        4.4.1) Create file .prettierrc.js
        4.4.2) module.export = {singleQuote: true, semi: false}
        4.4.3) More options: https://prettier.io/docs/en/options.html
5) Configure User Settings:
 "vetur.validation.template": false
 "eslint.validate": [
        {"language": "vue","autoFix": true},
        {"language": "html","autoFix": true},
        {"language": "javascript","autoFix": true}
    ],
    "eslint.autoFixOnSave": true,
    "editor.formatOnSave": true,
6) Install code Vue VS Snippets: Sarah.drasner vue snippets:
    6.1) vif, von, vdata, vprops, vimport-lib
    6.2) Use in settings the below, to avoid conflicts between Vetur snippets and Sahra Drasner snippets:
        "vetur.completion.useScaffolSnippets": false 

#SECTION 4: CLIENT SITE ROUTING: VUE-ROUTER

 - Router starts to be use din the router.js file
      <router-link to="/">Home</router-link> |
        <router-view/>
          routes: [{path: '/',name: 'home',component: Home]

`--------------------------------------------------------------`
`---------------------- #MASTERING VUEX -----------------------`
`--------------------------------------------------------------`



#SECTION 6: MODULES

`------------------------------------------------------------`
`        Accessing state from other modules: USE rootState
`------------------------------------------------------------`
- Actions, Mutations and Getters are in the global namespace, so no need to specify the name:
    this.$store.dispatch('someAction')
    this.$store.getters.theGetterName
-
[javascript]
// This action is in a different module
fetchEvent({ commit, rootState, actions, getters }, id) {
    // Using rootState we can access the global state
    var globalState = `Getting event for user: ${rootState.userStore.user.name}`
    var actionCalled = `Calling an action: ${actions.justForTest}`
    console.log(globalState)
})
[end]

https://vuex.vuejs.org/guide/modules.html#binding-helpers-with-namespace


`------------------------------------------------------------`
`        TWO WAYS TO DECLARE MODULES IN THE STORE            `
`------------------------------------------------------------`

[javascript]

// TO BE USED IN THE STORE
import * as moduleName from 'location/moduleName'

// IN A NEW FILE
export const state = {...}
export const mutations = {...}
export const actions = {...}
export const getters = {...}

// TO BE USED IN THE STORE
import moduleName from 'location/moduleName'

// IN A NEW FILE
export default{
  state {...},
  mutations {...},
  actions {...},
  getters {...},
}

[end]

`------------------------------------------------------------`
`        NEXT LEVEL VUE            `
`------------------------------------------------------------`

#SECTION 1: DELAY JSON SERVER
json-server -d 5000  db.json

#SECTION 1: NPROGRESS
- Use nprogress to install quite easy a progress bar.
- One option: interceptors in Axios
    [javascript]
        apiClient.interceptors.request.use(config => {
            NProgress.start()
            return config
        })

        apiClient.interceptors.response.use(response => {
            NProgress.done()
            return response
        })
    [end]

#SECTION 2: HOOKS IN ROUTE EVENTS (VUE ROUTER)
    To be used "like" interceptos
    beforeRouteUpdate(routeTo, routeFrom, next)
    beforeRouteLeave(routeTo, routeFrom, next)
    beforeRouteEnter(routeTo, routeFrom, next)

#SECTION 2: GLOBAL ROUTE GUARD (GLOBAL ROUTE HOOKS)
    - This hooks will be applied to all routes
    [javascript]
    router.beforeEach((routeTo, routeFrom, next) => {
        ...
    })
    router.afterEach((routeTo, routeFrom) => {
        ...
    })
    [end]
    - In addition within the route definition, you can add hooks called Per-Route guards (beforeEnter) as well, and pass the 
        output as a paramter (prop). Therefore, you can remove any dependency in the module from vuex
        (at the cost of adding the logic into the router)

        [javascript]
            {
                path: '/event/:id',
                name: 'event-show',
                component: EventShow,
                props: true,
                beforeEnter(routeTo, routeFrom, next) {
                    store.dispatch('event/fetchEvent', routeTo.params.id).then(event => {
                        routeTo.params.event = event
                        next()
                })
            }
        [end]