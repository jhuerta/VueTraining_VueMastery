`----------------------------------------------------`
1. List One 
2. List Two 
`----------------------------------------------------`
--> ----> 
==> ===> ====>
`----------------------------------------------------`
[javascript]
function() {
    console.log("Hellow World!");
}
[end]

function(){
        console.log("Hellow World!");
}

`----------------------------------------------------`
`Take Note` #Highlight# "Emphasis" * Important * !Remember! 
//Comment
[Square] (Other) {Brackets}
`----------------------------------------------------`
http://www.google.com
`----------------------------------------------------`

#SECTION 1.1: FIRST BASIC APPLICATION#
v-show: Toggles visibility 
v-if: Add and remove the element from the dom
Computed properties are CACHED, way more efficient than a method, run every time something changes.

#SECTION 3: OPTIMIZING YOUR EDITOR (VS CODE)

1) Install Vetur
    1) Color Highlight
    2) Snippets (in Vue files)
        2.1) scaffold
        2.2) emmet
2) Install Prettier - Code Formatter (Esben Petersen) 
3) Install ESLint (Dirk Baeumer)
4) Configure ESLint + Prettier  
    4.1) Previously, in our project, we have chosen dedicated config files. 
    4.2) Because dedicated config files, we have a .eslintrc files. (if not, the eslint configuration will be in the package.json file)
    4.3) Open .eslintrc and edit:
        4.3.1) 'extends': [ ...,'plugin:prettier/recommended',...] ===> This enable prettier within eslint support with default settings
    4.4) Create prettier config file for our own custom settings:
        4.4.1) Create file .prettierrc.js
        4.4.2) module.export = {singleQuote: true, semi: false}
        4.4.3) More options: https://prettier.io/docs/en/options.html
5) Configure User Settings:
 "vetur.validation.template": false
 "eslint.validate": [
        {"language": "vue","autoFix": true},
        {"language": "html","autoFix": true},
        {"language": "javascript","autoFix": true}
    ],
    "eslint.autoFixOnSave": true,
    "editor.formatOnSave": true,
6) Install code Vue VS Snippets: Sarah.drasner vue snippets:
    6.1) vif, von, vdata, vprops, vimport-lib
    6.2) Use in settings the below, to avoid conflicts between Vetur snippets and Sahra Drasner snippets:
        "vetur.completion.useScaffolSnippets": false 

#SECTION 4: CLIENT SITE ROUTING: VUE-ROUTER

 - Router starts to be use din the router.js file
      <router-link to="/">Home</router-link> |
        <router-view/>
          routes: [{path: '/',name: 'home',component: Home]

`--------------------------------------------------------------`
`---------------------- #MASTERING VUEX -----------------------`
`--------------------------------------------------------------`



#SECTION 6: MODULES

`------------------------------------------------------------`
`        Accessing state from other modules: USE rootState
`------------------------------------------------------------`
- Actions, Mutations and Getters are in the global namespace, so no need to specify the name:
    this.$store.dispatch('someAction')
    this.$store.getters.theGetterName
-
[javascript]
// This action is in a different module
fetchEvent({ commit, rootState, actions, getters }, id) {
    // Using rootState we can access the global state
    var globalState = `Getting event for user: ${rootState.userStore.user.name}`
    var actionCalled = `Calling an action: ${actions.justForTest}`
    console.log(globalState)
})
[end]

https://vuex.vuejs.org/guide/modules.html#binding-helpers-with-namespace


`------------------------------------------------------------`
`        TWO WAYS TO DECLARE MODULES IN THE STORE            `
`------------------------------------------------------------`

[javascript]

// TO BE USED IN THE STORE
import * as moduleName from 'location/moduleName'

// IN A NEW FILE
export const state = {...}
export const mutations = {...}
export const actions = {...}
export const getters = {...}

// TO BE USED IN THE STORE
import moduleName from 'location/moduleName'

// IN A NEW FILE
export default{
  state {...},
  mutations {...},
  actions {...},
  getters {...},
}

[end]

`------------------------------------------------------------`
`        NEXT LEVEL VUE            `
`------------------------------------------------------------`

#SECTION 1: DELAY JSON SERVER
json-server -d 5000  db.json

#SECTION 1: NPROGRESS
- Use nprogress to install quite easy a progress bar.
- One option: interceptors in Axios
[javascript]
    apiClient.interceptors.request.use(config => {
        NProgress.start()
        return config
    })

    apiClient.interceptors.response.use(response => {
        NProgress.done()
        return response
    })
[end]


#SECTION 2: HOOKS IN ROUTE EVENTS (VUE ROUTER)
    To be used "like" interceptos
    beforeRouteUpdate(routeTo, routeFrom, next)
    beforeRouteLeave(routeTo, routeFrom, next)
    beforeRouteEnter(routeTo, routeFrom, next)

#SECTION 2: GLOBAL ROUTE GUARD (GLOBAL ROUTE HOOKS)
    - This hooks will be applied to all routes
[javascript]
router.beforeEach((routeTo, routeFrom, next) => {
    ...
})
router.afterEach((routeTo, routeFrom) => {
    ...
})
[end]
    - In addition within the route definition, you can add hooks called Per-Route guards (beforeEnter) as well, and pass the 
        output as a paramter (prop). Therefore, you can remove any dependency in the module from vuex
        (at the cost of adding the logic into the router)

[javascript]
    {
        path: '/event/:id',
        name: 'event-show',
        component: EventShow,
        props: true,
        beforeEnter(routeTo, routeFrom, next) {
            store.dispatch('event/fetchEvent', routeTo.params.id).then(event => {
                routeTo.params.event = event
                next()
            })
        }
    }
[end]
#SECTION 7: REGISTER GLOBALLLY COMPONENTS
- Register locally
    - In the component itself:
        export default {...}
    - In the component where it will be used
        import COMPONENT_NAME from 'component_location'

        export default {
            components: {
                COMPONENT_NAME
            }
        }
- Register globally
    - In the main.js file:
        import COMPONENT_NAME from 'component_location'

        Vue.component('COMPONENT_CHOSEN_NAME', COMPONENT_NAME)

        // Before the new Vue() statement
        new Vue(...)

#SECTION 8: BASE COMPONENTS
- By default, the attributes of a component will be passed into the root of the base template.
    If you want the attributes to be passed somewhere down the template, use 'inheritAttrs: false,' and v-bind="$attrs"
        <input @input="updateValue" :value="value" v-bind="$attrs"/>

        <script>
            export default {
                inheritAttrs: false,
                ...
            }
        </script>
- Remember: 
    - TO communicate from CHILD to PARENT, emmit events!
    - TO communicate from PARENT to CHILD, use props!
    - Use v-on="$listeners"  inside the child component, if you want the parent component to listen (get notified) of the events in the child
    To combine v-on="$listeners" and v-model, depends on the Vue version, there may be some conflics. Read the following links:
    https://vuejs.org/v2/guide/components-custom-events.html 
    https://github.com/vuejs/vue/issues/7042
    And implement this on v-on='inputListeners'
[javascript]
    computed: {
    inputListeners: function () {
        var vm = this
        // `Object.assign` merges objects together to form a new object
        return Object.assign({},
        // We add all the listeners from the parent
        this.$listeners,
        // Then we can add custom listeners or override the
        // behavior of some listeners.
        {
            // This ensures that the component works with v-model
            input: function (event) {
            vm.$emit('input', event.target.value)
            }
        }
        )
    }
    },
[end]


#SECTION 9: FORM VALIDATION: USE VUELIDATE
    -   npm install vuelidate
    import { required, email } from 'vuelidate/lib/validators'
    
    export default {
        data() {...},
        validations: {
            email: { required, email }
        }
    }

    /*
      $this.$v.$touch()
      $this.$v.$invalid
      $this.$v.$anyError
      $this.$v.email.$touch()
      $this.$v.$invalid
      $this.$v.event.category.$error
      $this.$v.event.title.$touch()
      $this.$v.event.location.required
    */

#SECTION 10: MIXINS
    Mixins: 
        1. The created hook runs before than the component!!!!!!
        2. In case of conflics, the name of data or method in the component takes priority over the mixin
        3. It is considered like in extract/merge of a component
            // Mixin
            export const mixinName = {
                methods: {...},
                data() {...},
            }

            // Component
            import {mixinName} from 'MIXIN_LOCATION'
            export default {
                mixins: [mixinName] `<---------`
                methods: {...},
                data() {...},
            }
        4. Global MIXIN
        Vue.mixin({
            mounted(){
                console.log('I will be in every component')
            }
        })

#SECTION 12: FILTERS
    <template>
    <div>
        {{message | FILTER_NAME('arg_1')}}
    </div>
    </template>

    export default {
        data() {
            return {
            message: 'Here a message'
            }
        },
        filters: {
            FILTER_NAME(value, arg_1): { return                    ANY_TRANSFORMATION(value,arg_1) 
            }
        }
    }

    - GLOBAL FILTERS
        * Within filter file:
        export default (value, arg1, arg2) => {
            return ANY_TRANSFORMATION(value, arg1, arg2)
        }
        * Within main.js
        import ANY_NAME from 'FILTER_FILE_LOCATION'
        Vue.filter('any_other_name', ANY_NAME)
        * Within component
        {{ data_value | any_other_name(arg1, arg2) 

        PROBALY IS BETTER TO USE COMPUTED BECAUSE OF THE CACHING!!!

`------------------------------------------------------------`
`        ADVANCED COMPONENTS                                 `
`------------------------------------------------------------`
#SECTION 1: COMPONENTS
Interesting view on the watch elements. Inside look into how the watchers gets reactive when data changes.
`1. IMPORTANT!!!!: VUE CANNOT DETECT THE FOLLOWING CHANGES: `
    app.items[index] = newValue -----> This wont trigger the watch!!!!!!!!!
    USE INSTEAD
    Vue.set(app.items, index, newValue)

    app.items.length = newLength -----> This wont trigger the watch!!!!!!!!!
    USE INSTEAD
    app.items.splice(indexOfItem,1,newLength)

`2. IMPORTANT!!!!: ADDING NEW REACTIVE PROPERTIES TO VUE OBJECT `


[javascript]
// THIS WONT MAKE THE SIZE PROPERTY REACTIVE
var app = new Vue({
    data: {
        product: "Socks"
    }

})
app.size = "XXL" 

// USE THIS APPROACH TO ADD REACTIVE PROPERTIES
var app = new Vue({
    data: {
        product: { // <-------- NOTICE WE ARE USING AN OBJECT INSTEAD OF THE SINGLE VARIABLE
            name: "Socks"
        }
    }

})

Vue.set(app.product,"color","red") // <----- This 'color' property IS REACTIVE
// Below the way to add multiple reactive properties
app.product = Object.assign( {}, app.product, {
    isAvailable = true,
    price = 50,
    material = 'Wool'
})

[end]
#SECTION 2: FUNCTIONAL COMPONENTS
To be used for components with little logic to create fast-loading presentational component. Not so sure on the beneffits in our case.

!!!!GOOD USE CASES:!!!!
- !LEAF OBJECTS!: objects that are quite in number and at the end of the virtual DOM tree. Example of list (or a table) with a button in each row. If each button is a functional component instead of a normal component, there will be less instances of Vue, !!!!!BECAUSE FUNCTIONAL COMPONENT DO NOT INSTANTIATE VUE!!!!!!!.

[javascript]
<template>
  <span>
    <div>One</div>
    <div>Two</div>
    <div>Three</div>
    <div>Four</div>
  </span>
</template>

<script>
export default {
  functional: true,
  name: 'functionaComponent'
}
</script>
[end]

#SECTION 3: SCOPED SLOTS AND RENDER props
A nice way to create slots in your components and allow the child receive data from the parent component.
[javascript]

<products-list :products="products">
    <template slot="product" slot-scope="slotProps">
        <img :src="slotProps.product.image" /> {{ slotProps.product.name.toUpperCase() }}
    </template>

    // Or this way using desctructing
    <template slot="product" slot-scope="{{ product }}">
        <img :src="product.image" /> {{ product.name.toUpperCase() }}
    </template>

</products-list>
// Here the declarion of the slot in the product-list component:
template: `
        <ul>
          <li v-for="product in products">
            <slot name="product" :product="product" >
                {{ product.name }}
            </slot>
          </li>
        </ul>`
[end]

Another way of looking at this:

In the declaration of the scope, we know we are getting a prop, in this case the prop name is user. And we can SEND BACK this props attributes back to the parent, in "new props", which are first and last.

Child template
    <slot name="person" :first="user.firstName" :last="user.lastName"

In the parent template, we recover the props send from the child as first and last. We create the component user-card,and send the user prop. However, we specify the way we want to render in the parent
Parent template:
<user-card :user="user">
    <template slot="person" slot-scope="{first,last}">
    <h1>{{first}}</h1>
    <h1>{{last}}</h1>
    </template>
</user-card>
